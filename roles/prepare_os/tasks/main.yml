---
- name: Download RPi OS image
  get_url:
    url: "{{ rpi_os_image_url }}"
    checksum: "{{ rpi_os_image_checksum }}"
    dest: /opt/os-origin.img.xz
  register: download

- name: Install Kpartx package
  package:
    name: kpartx
    state: present
- name: Unarchive the image
  shell: "unxz --keep /opt/os-origin.img.xz"
  when: download.changed

- name: Make a copy of the file
  shell: "cp /opt/os-origin.img /opt/os.img"

- name: Add some free space to the image
  shell: "dd if=/dev/zero bs=1M count=500 >> /opt/os.img"

- name: Expand partition 2
  shell: "parted /opt/os.img resizepart 2 100%"

- name: Cleanup mounts
  ansible.posix.mount:
    path: "{{ image_mount_point }}"
    state: unmounted

- name: Cleanup device
  shell: "echo 'remove device' && kpartx -d /opt/os.img"

- name: Enable loop device
  community.general.modprobe:
    name: loop
    state: present

- name: Attach image to a virtual device
  shell: "kpartx -a /opt/os.img"
  notify: Cleanup device

- name: List attached virtual device
  shell: "kpartx -l /opt/os.img"
  register: kpartx

- name: Get the loop mapper path from previous output
  set_fact:
    loop_mapper: "{{ kpartx.stdout_lines[1].split(' :')[0] }}"

- name: Apply partition expansion when needed
  shell: "e2fsck -y -f /dev/mapper/{{loop_mapper}}"
  ignore_errors: yes

- name: Resize file system
  shell: "resize2fs -p /dev/mapper/{{loop_mapper}}"
  notify: Cleanup device

- name: Flush handlers
  meta: flush_handlers

- name: "Get the data partition first byte"
  community.general.parted:
    device: /opt/os.img
    unit: B
  register: parted

- name: "Create '{{ image_mount_point }}' mount point"
  file:
    path: "{{ image_mount_point }}"
    state: directory

- name: Mount the data partition on loop, with offset
  ansible.posix.mount:
    src: /opt/os.img
    fstype: ext4
    opts: "loop,offset={{ parted.partitions[1].begin | int }}"
    path: "{{ image_mount_point }}"
    state: mounted

- name: Copy /etc/resolve.conf from host
  copy:
    src: /etc/resolv.conf
    dest: "{{ image_mount_point }}/etc/resolv.conf"
    remote_src: yes

- name: Install Qemu packages
  package:
    name:
      - qemu
      - binfmt-support
      - qemu-user-static
      - qemu-utils
      - qemu-efi-aarch64
      - qemu-system-arm

- name: Copy 'qemu-arm-static'
  copy:
    src: /usr/bin/qemu-arm-static
    dest:  "{{ image_mount_point }}/usr/bin"
    remote_src: yes
    mode: u+rwx,g+rx,o+rx

- name: Copy 'qemu-aarch64-static'
  copy:
    src: /usr/bin/qemu-aarch64-static
    dest:  "{{ image_mount_point }}/usr/bin"
    remote_src: yes
    mode: u+rwx,g+rx,o+rx

- name: Mount host '/proc' folder
  ansible.posix.mount:
    path: "{{ image_mount_point }}/proc"
    src: /proc
    opts: bind
    state: mounted
    fstype: none

- name: Mount host '/dev' folder
  ansible.posix.mount:
    path: "{{ image_mount_point }}/dev"
    src: /dev
    opts: bind
    state: mounted
    fstype: none
